					            Git Command

Course code yoziladi gitni projectga tortib olingandan so`ng git ga file yuklanadi.
File esa git staging ga boring tushadi. Git stagingdan esa git repository ga o`tqaziladi.

1: git remote add origin <git repository link> ->
Bu command local repository ni global repository ga bog`lash uchun ishatiladi.

2: git branch -b (branch_name) -> command orqali git da yangi local filial(branch) yaratish imkonini beradi.

3: git branch -D (branch_name) -> git dagi local filial(branch) ni o`chiradi.

4: git push origin --delete (remote_branch_name) -> git dagi remote branch ni o`chirib yuboradi.

5: nano gitignore -> command orqali git repository ga nima qo`shilishini belgilasa bo`ladi.

6: git add . -> command orqali git repository ga filelarni qo`shadi va git staging ga borib tushadi.

7: git commit -m "Your message" -> command orqali git repository ga sourse code ni add qiladi.

8: git push -u origin <git repository branch name>
Bu command orqali sizning branchingizdagi code ma`lumotni git repository ga o`tqizadi.

9: git pull origin <git repository branch name>
Bu command orqali git repository dagi ma`lumotni sizga ko`chirib beradi.

10: git checkout (branch_name) -> bu command orqali bir branchdan boshqa branchga o`tqazib yuboradi.

11: git log -> bu command orqali git o`zgarishlarni ko`rish mumkin.

12: git rebase <branch_name> -> merge commandasi bilan birxil farqi barcha commit ni yig`ib olib kelib birlashtirib yuboradi.

13: git merge <branch_name> -> bir branch o`zgarishlarini ikkinchi branchga olib kelib beradi.

14: git revert -n branch_name

: -u -> upstream
: -m -> message
: -b -> branches


 1 -> amal bajarish
 2 -> git add . git stagin ga borib tushadi
 3 -> git commit -m "your message" git repository ga qo`yilishiga start bo`ladi.
 4 -> git push origin <branch_name> git repository ga borib tushadi.


1:  Git nima? -> Git bu version control deb yurutiladi yani code versialarni boshqarish.
    misol uchun codlar vaqt o`tishi bilan o`zgartiriladi yani nimadir yangililar qo`shiladi, nimadirlar to`g`irlanadi
    nimadirlar o`chiriladi va har bitta kiritilgan o`zgarishlarni saqlab borishlik va har bitta kiritilgan o`zgarish
    kodning versiyasi hisoblanadi shu versialarni tarixini saqlash, kod qandaqa bo`lgandi oldin, nimalar qo`shildi,
    kim qo`shti, qachon qo`shti, kim nima o`zgartirish kiritdi hullas barcha source kodni saqlab turuvchi va
    saqlab turishlikda bizga yurdam beradigan texnologiya git hisoblanadi. Git bu umumiy texnoligiya endi Gitni amalga oshirishda
    o`zini yana texnoligiyalari bor misol uchun Git bu umumiy oladigan bo`lsak  komandalar yig`indisi va shu komandalar bilan ishlanadi
    va bu komandalarni amalga oshirilishi uchun biz o`zimizda gitni ustanofka qilishimiz kerak lokal holatda bo`ladi
    va har bitta qiladigon ishimiz uchun ochgan proektimiz bu repository hisoblanadi.

2:  Repository nima? -> Repository bu proektimizni gitga saqlashlik uchun yani aynan shu loyihani gitga qo`yishlik uchun gitdan bitta repository ochiladi
    ya`ni bitta loyiha ochiladi shu repositoryni ichida branchlar bo`ladi, har bitta odamni yozgan kodlari, istoriyalari hullas umumiy loyiha(proekt)
    repository deb qabul qilsak bo`ladi.

3:  Local repository nima? -> Git ni o`rnatganimizda local kompyuterga o`rnatamiz va repository ham local bo`lib saqlanadi.
    Ya`ni men o`zimni kompyuterimga git o`rnatdam kompyuterimda amalga oshirilayotgan komandalarim bu local repository uchun hisoblanadi.
    Ya`ni bu degani agar men faqatgina kodni versiyasini saqlashlik uchun ishlatmoqchi bo`lsam yoki oldingi kiritgan o`zgarishlrim ustida bir
    o`zim ishlasam yoki oldingi kiritgan o`zgarishlarimni saqlashlik kerak bo`lsa local repository da ishlasam menda muammo bo`lmaydi.
    Local repository bilan ishlashlikda qandaqa muammo bo`lishligi mumkin yan kompyuteriz ishdan chiqsa yoki buzulib qolsa yoki repository o`chib ketsa,
    repositoryni qayta tiklash mashaqat tug`diradi.

4:  Global repository nima? -> Global repository bu local repositoryni qanaqadir birorta global serverga kodimizni saqlanishligi global repository deb yurutiladi.
    Local repositoryni qaysidir serverga saqlanishligi va bu serverni amalga oshirilishlik uchun bir nechta kontribyuterlar bor misol uchun
    Github yoki GitLab shunga o`xshagan kontribyuterlar bular global repositoryni uchun texnologiya desak bo`ladi. Endi local repositoryni olib
    global repositoryga qo`yamiz va u global repositoryni boshqa foydalanuvchilar yani boshqa dastruchilar kodlarni olib ishlatilishligi mumkin bo`ladi va
    bunda jamoaviy ishlashlik uchun ajoyib muhit hosil bo`ladi.

5:  Working directory nima? -> Working directory bu local kompyuterimizda yozib turgan kodimizni holati working directory da yoziladi
    va bu working directorydan aynan qaysidir o`zgarishlarni saqlamoqchi bo`lsam gitni hotirasiga yoki git versiyaga yoki repositoryga qo`shmoqchi
    bo`lsam working directorydan yani kod yozib turgan joyimdan uni manashu manashi kodlarni qo`shaman va stagingga o`tqizaman.

6:  Staging nima? -> Staging bu vaqtinchalik joy. Stagingdan keyin kodlar commit qilinadi va aynan stagingdagi kodlar commit bo`ladi.

7:  Commit nima? -> Commit bu birnechta  classlar, filelar dagi o`zgarishlarni umumiy qilib bitta upakofkaga saqlab turushlik misol uchun
    yani hammasini bitta umumiy qilib shudaqa shundaqa o`zgarish bo`ldi deb numlashlik uchun qandaqadur paket deb olsak bo`ladi.
    Endi commit qilinadigan bo`lsa shu o`zgarishlar local repositoryga birorta habar ostida o`zgarishlar saqlanadi. Agar biz shu o`zgarishlarni
    global repositoryga yubormoqchi bo`lsak push komandasini ishlatishimizga to`g`ri keladi.

8:  git push nima qilib beradi? -> Git push komandasi local repositoydagi o`zgarishlarni global repositoryga uzatib beradi.

9:  Branch nima? -> Branch bu qanaqadur amalga oshirilayotgan yangi kodni, aytaylik dasturchilarni o`zini, qilayotgan ishlarini bir birga aralashib ketmasligi uchun
    baranchdan foydalaniladi. Misol uchun asosiy koddan nusha olinib 2 - branchga qo`yiladi va bu branchda qilinishi kerak bo`lgan ish oxirigachon
    qilinadi, testlab ko`riladi, ishlatilib ko`riladi, agar hammasi joida bo`lsa keyin asosiy kodga qo`shiladi bu narsa bizda kodni tozaligini saqlaydi
    va birnechta dasturchilar ishlayotgan paytda birbiriga aralashib ketmasdan o`ziga alohida muhit ishlashlik imkoniyyatini beradi.

10: git pull nima? -> Git pull bu global repositorydagi o`zgarishlarni local repositoryga tortib olish ya`ni misol uchun 2 ta dasturchi ish olib bormoqta
    1 - developer biror bir o`zgarish kiritdi va global repositoryga yukladi 2 - developer shu o`zgarishlarni olishligi uchun 1 - developer o`zgarish kiritgan
    branchga o`tadida va shu branch bo`yicha git pull komandasidan foydalanib origindan ya`ni global repositorydan yangilanishlarni tortib oladi.

11: git merge nima? -> Git merge bu 2 ta branchni bir birga qo`shib beradi ya`ni misol uchun 1 - branch yaratdik qandaydir funksional qo`shishlik uchun
    va u funsionallik ishladi testlab ko`rdik barcha bosqichdan o`tdi endi buni asosiy branchga qo`shmoqchi bo`lsak shu git merge komandasi orqali
    qoshishamiz.

12: git rebase nima? -> Git rebase bu git merge bilan bir-xil 2 ta brenchni bir-biriga qo`shadi faqat buni bir-birdan biroz farqlari bor.
    Rebaseda asosiy farqlaridan bittasi merge qilinganda kiritilgan barcha o`zgarishlar bitta commit nomida o`tadi ya`ni misol uchun 4 ta commit orqali
    nimadur o`zgarish bo`lganda bitta branchda shu branchni 4 ta commit ni 2 - branchga birlashtirmoqchi bo`lsa shu 4 ta commit agar merge qilinadigan bo`lsa
    1 ta commitga birlashib merge bo`ladi ya`ni merge ni habari nimdur bo`ladida uni ichida 4 ta commit o`zgarish amalga oshirilgan bo`ladi.
    Rebase qiladigan bo`lsak bu 4 ta commit shundayligicha o`tadi ya`ni bitta nomga birlashmasdan 4 ta commit bo`lib 2 - branchga o`tadi.

13: Github pull request nima? -> Github pull request merge qilinishi uchun yani 1 - branchdagi o`zgarishlarni 2 - barachga
    merge qilinilishligi uchun pull request hosil qilinadi bu degani men 1 - branchdan 2 - branchga kiritilga o`zgarishlarni merge qilmoqchiman deb jamoa
    azolariga habar bildirishligi uchun e`lon berishlik bo`ladi va uni boshqa jamoa azolari ko`radi,
    tastiqlasa tastiqlaydi commentariya beradi, xatoliklar bo`lsa xatoliklarni aytadi va undan keyin merge qilishlik yoki pull requestni bekor qilishlik bo`yicha
    qaror qabul qilinadi.

14: Merge conflict qachon yuzaga keladi? -> Merge conflict 2 ta branch ni bir-birga qo`shmoqchi bo`lsak va ikkala branchda bir xil joyda yozilgan kodlar
    misol uchun qandaqadur class bor deylik va shu classning qandaydur methodi bor deylik shu methodni aynan bir xil joydagi va bir xil qatordagi kodlar
    ikkalasida ikki xil bo`lib qolsa manashu conflict hisoblanadi.

