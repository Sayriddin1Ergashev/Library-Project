                            Database key value Information
 1: Procedure bu funksiya bilan bajariladigan vazifalarni bajarish sturkturasi deyarli bir-xil ya`ni qiymat
     qaytarmaydigan method ga o`xshab ketadi. Procedure dan foydalanib ma`lumot qo`shish uchun, ekranga qandaydur habar
     chiqarish uchun, transaction control uchun, jadval ustunini yaratishimiz uchun, jadval ma`lumotlarini
     chiqarish uchun, jadval hatolari ya`ni istisnolarni chiqarish uchun, jadvalga loop orqali ma`lumot kiritish uchun,
     konfigureyshin parametrlarini o`zgartirish uchun foydalaniladi. Yaratilgan procedure dan foydalaish uchun call procedure_name
     orqali chaqiriladi.

2: View bu so`rov ya`ni qayta-qayta yozilishi kerak bo`lgan query uchun view as qotadi ya`ni takrorlanuvchi qayta qayta yozishlikni
        oldini oladi va view orqali shu query saqlab qo`yiladi. View orqali ko`p ishtilinadigan murakkab query larni ishlatishni
        nom berib saqlab qo`yamiz va osonlashtirish huquqiga ega bo`lamiz.

3: Materialise view bu postgtresql da view ga o`xshaydi lekin u o`zida jadvalga o`xshab ma`lumotlarni saqlab turadi.
     materialise view fizik hususiyyat ya`ni fizik o`rniga ega. Materialise view da biz hosil qilgan materialise view uchun
     fizik hotira ajratiladi oddiy view da qandaydir query saqlanadi biz querydan select qilib olgan vaqtimizda queryni
     execute qilib queryda murakkab logikani amalga oshirib ma`lumotlarni tortib olib kelib beradi.
     Materialise view esa ma`lumotlarni bir marotaba create qilgan voqtimizda ma`lumotlarni o`ziga olib kelib ajratilgan xotiraga saqlab qoyadi.
     Saqlangan ma`lumotlarni olayotgan paytimizda o`zi saqlab turgan ma`lumotlarni olib kelib beradi.
     Materialise view minus tarafi yaratilgan materialise view ni yangilab turishimiz kerak bo`ladi sababi
     bog`langan jadvalga biror bir yangi ma`lumot qo`shiladigan bo`lsa materialise view eski ma`lumotni saqlab turadi shu sababli
     yaratilgan materialise view ni yangilab turish kerak bo`ladi.

4: Trigger  bu qandaqadur xodisa bo`lgan paytda qandaqadur ish qilishlik trigger deyiladi.
     Misol uchun user jadvalga nimadur ma`lumot qo`shilgan paytda qandaydir funkiyaliallik bajarilishi uchun
     trigger yoziladi userga ma`lumot qo`shilsa, o`chirilsa, ma`lumot o`zgartirilgan paytlarda yaratilgan
     trigger funksiya automat ishga tushib ketadi.
     Trigger da Trigger Data tushuncha bu new yoki old ma`lumotlarini beradi.
      - New -> jadvalga ma`lumot qo`shilayotgan paytda ustunni eski qiymati bo`lmaydi faqat yangi qiymat bo`ladi va new keyword qiladigan bo`lasam.
               Shu yangi qiymatni menga olib kelib beradi.
      - Old -> jadvalni ma`lumotlarini o`chirilayotgan paytda ustunning eski qiymati bo`ladi. SHu qiymatni old keyword orqali ishlatadigan bo`lsam.
               Shu jadvalning eski ma`lumotlarini olib kelib beradi.

5: Partition bu katta jadvalni kichkina fizik qismlarga ajratib chiqishlik tushuniladi ya`ni qandaqadur logika asosida katta jadvalni kichkina kichkina
        qismlarga ajratib chiqishlik tushuniladi va bu qismlar fizik qisim bo`ladi xotiradan alohida joy ajratib alohida qiliib qo`yiladi.
   Partition bu bo`laklarga ajratish deb tushuniladi. Misol uchun ma`lumotlar bilan ishlayotgan paytimizda qaysidur bitta ustun bo`yicha ustunni qandaqadur
     yo`riqlarga ajratish mumkin bo`lsin misol uchun userlarni oladigan bo`lsak userlarni tug`unlag yili bo`yicha qismlarga ajratishlik mumkin yoki
     yoshi bo`yicha qismlarga ajratishlik mumkin yoki userlar tanlab turgan pull birligi bo`yicha qismlarga ajratishlik mumkin.
    Partitionni qulayliklari
        - Birinchi navbatda so`rovni tezligini sezilarli darajada oshiradi.
        - Index bilan ishlashni osonlashtiradi ya`ni to`liq jadvalni index bilan partition yaratilgan index bilan ishlashlik osonlashadi.
        - Biz ma`lumotlarni big delete, update, insert qiladigan bo`lsak partition lar bilan ishlash juda bizga mos keladi sababi.





                                         Database Information

 1: ORM -> Object Relation Mapping  database bilan bog`lanishlikni turi hisoblanadi yani databse dan kelayotgan
       ma`lumotni java obyektiga o`girib berishlikga hizmat qiladi.


 2: JPA -> Java Persistence API bu ORM ni javadagi qonun qoidalari JPA deb yurutiladi.
           JPA bu specification ya`ni qonun qoidalrning to`plami.

 3: Hibernate, MyBatis, Eclipse-Link -> JPA qonun qoidalariga asosida ishlab chiqilgan framework hisoblanadi.
    Ya`ni JPA qonun qoidalarni amalga oshirgan  Object relation mapping ni qonun-qoidalarini tadbiq qiladigan framework hisoblanadi.

 4: Spring Data Jpa bu spring framework moduli ya`ni spring framework ni bitta qismi hisoblanadi.

 5: JDBC -> Java Database Connectivity bu Java bilan database bog`lanishligi uchun JDBC tadbiq qilinadi.
    JDBC ga asoslansa database dan java ga ma`lumot olish qiyinroq bo`ladi. Vaqt o`tishi bilan JDBC ni
    takomillashtirib ORM ishlab chiqildi va ORM ni bitta qonun qoidalarini yig`ib JPA ishlab chiqishgan va
    JPA ni indicator sifatida (Hibernate, MyBatis, Eclipse-Link) shunga o`xshagan framework lar ishlab chiqilgan.
    va  (Hibernate, MyBatis, Eclipse-Link) larni ham ossonlashtirib Spring Data JPA ni taqdim qilishgan.

 6: @OneToOne bu annotation ikkita entity o`rtasida birga bir bog`lanish bo`lib relation sheep da bo`ladigan bo`lsa
    shu entity larni java darajasida bog`lashlik uchun ishlatiladi. Buni ishlatishlik uchun shu bog`lanilayotgan jadvalni
    tipini field sifatida berishlik kerak bo`ladi. OneToOne parametrlari:
     1. targetEntity orqali aynan class o`zini ham berib qo`yishligimiz mumkin yani berilgan class type nima turgan bo`lsa o`ziga o`zi bog`lanadi.

     2. cascade orqali bog`lanib turgan ma`lumotlardan bir donasi o`chib ketadigan bo`lsa cascade type berishimiz kerak bo`ladi.
        cascade type ->  ALL, PERSIST, MERGE, REMOVE, REFRESH, DETACH; bular ma`lumot o`chirilgan paytda nima qilishligini aniqlab beradi.

     3. fetch orqali database dan ma`lumotni tortib kelishlik ya`ni misol uchun men agar account jadvalini olayotgan bo`lsam
        user ni qo`shib olishim mumkin yoki userni keyinchalik accountga qo`shib olishim mumkin.
        fetch type -> LAZY, EAGER;
         1. LAZY bu birinchi account ni tortib keladi userni esa qachon so`rasam shunda tortib olib kelib beradi.
         2. EAGER bu bittada ma`lumotni tortib olib kelib beradi.

     4. optional orqali true yoki false qiymat bersak bo`ladi. Agar false beriladigan bo`lsa shu jadal bog`lanishlik doimo bo`lishligi kerak
        ya`ni ikkinchi tarafda bu type null bo`lib qolishligi kerak emas.

     5. mappedBy orqali ikki tarafda bog`lanishlik amalga oshirilganda ikkinchi tarafga mappedBy qo`yiladi.

     6. orphanRemoval orqali berilgan tabledan nimadur o`chiriladigan bo`lsa shu o`chiriladigan entity uchun cascade amalga oshirilshini belgilab beradi.


 7. @JoinColum annotation  (OneToOne, OneToMany, ManyToOne, ManyToMany) orqali RelationSheep bo`lgan paytda qaysi ustun qaysi ustunga bog`lanilayotganligini ko`rsatib beradi.
      Type -> name, referencedColumnName, unique, nullable, insertable, updatable, columnDefinition, table
      1. name orqali berilgan table id name ni foreign key sifatida olib beriladi.
      2. referencedColumnName orqali bog`lanilayotgan table id name ni primary key sifatida olib beriladi.
      3. unique orqali bog’lanayotgan ustun unique bo’lsa, constraint qo’yib beradi.
      4. nullable orqali foreign key null qiymat qabul qiladimi yo’qmi, shuni bildiradi.
      5. insertable orqali ikkita entity bir-biriga bog’langan va siz birinchi entityni save qilgansiz va u ikkinchi entityga bog’langan.
         insertable true bo’lsa, ikkinchi entityni ham save qiladi. ya’ni bog’langan entity uchun ham insert query yozadi. o’zi default holatda true bo’ladi.
      6. updatable oqali ikkita entity bir-biriga bog`langan va siz birinchi entityni save qilganizda i kiinchi entity bog`langan.
         updatable true bo`lsa, ikkinchi entityni ham save qiladi. ya`ni bog`langan entity uchun ham update query yozadi. o`zi default holatda true bo`ladi.
      7. columnDefinition orqali insert yoki update bo’lganda default qiymat yozish uchun kerak bo’ladi.
      8. table orqali bog’lanayotgan jadval nomini berish mumkin.
